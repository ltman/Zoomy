apply plugin: 'com.android.library'

ext {
    PUBLISH_ARTIFACT_ID = 'zoomy'
}

//apply from: "${rootDir}/scripts/publish-module.gradle"
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionName "1.0.1-beta02"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
}

publishing {
    def githubProperties = new Properties()
    def githubPropertiesFile = "github.properties"
    if (rootProject.file(githubPropertiesFile).exists()) {
        //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file
        githubProperties.load(new FileInputStream(rootProject.file(githubPropertiesFile)))
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/ltman/zoomy")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_KEY")
            }
        }
    }
    publications {
        android.libraryVariants.all { variant ->
            ////def filename = "${archivesBaseName}-${variant.baseName}-${android.defaultConfig.versionName}"
            if (variant.buildType.name == "debug") {
                def filename = "${archivesBaseName}-${variant.baseName}"
                println("Filename: $filename")
                "${variant.name}"(MavenPublication) {
                    //println(variant.name)
                    groupId 'com.ltman'
                    artifactId = "zoomy"
                    version = "${android.defaultConfig.versionName}"

                    artifact file("$buildDir/outputs/aar/${filename}.aar")

                    pom.withXml {
                        // for dependencies and exclusions
                        def dependenciesNode = asNode().appendNode('dependencies')
                        def configurationNames = ["implementation", "api", "runtimeOnly"]
                        configurationNames.each { confName ->
                            configurations[confName].allDependencies.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                println("dependency: ${it}")
//                                if (it.excludeRules.size() > 0) {
//                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
//                                    it.excludeRules.each { rule ->
//                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
//                                        exclusionNode.appendNode('groupId', rule.group)
//                                        exclusionNode.appendNode('artifactId', rule.module)
//                                    }
//                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
publish.dependsOn(assemble)